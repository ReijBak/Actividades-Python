#    Caso de uso (√âpica): Como l√≠der de operaciones de inventario, quiero un sistema que permita
#    gestionar el inventario de una tienda de manera din√°mica, para que pueda realizar un seguimiento
#    eficiente de los productos disponibles, su cantidad y precios actualizados, adem√°s de calcular el valor
#    total del inventario.
#
#    Funcionalidades principales: para alcanzar un resultado √≥ptimo en esta prueba, deber√°s:
#    
#    1. A√±adir productos al inventario: permitir al usuario agregar productos con atributos como
#       nombre, precio y cantidad disponibles.
#    2. Consultar productos en inventario: buscar un producto por su nombre y mostrar sus
#       detalles (nombre, precio, cantidad).
#    3. Actualizar precios de productos: modificar el precio de un producto espec√≠fico en el
#       inventario.
#    4. Eliminar productos del inventario: permitir la eliminaci√≥n de un producto que ya no est√°
#       disponible.
#    5. Calcular el valor total del inventario: multiplicar el precio por la cantidad de cada producto
#       y mostrar el total acumulado.

print("\n¬°Bienvenido! üëã\n")

inventory = {} # The dictionary to be used to store the items is declared.

DANGER = "\033[91m"
WARNING = "\033[93m"
SUCCESS = "\033[92m"
RESET = "\033[0m"

def add_product(): # This function is used for add a item, if it haven't was added yet.
    
    cont = True
    name = input("Nombre del producto üì¶: ").strip().lower()
    
    if name in inventory:
        print(WARNING + "‚ö†Ô∏è El producto ya existe en el inventario." + RESET)
        return
    
    while cont:    
        
        try:
            
            price = float(input("Precio del producto: "))
            if price <= 0:
                print(DANGER + "‚ùå Error: El precio debe ser una cantidad positiva." + RESET)
                continue
            cont = False

        except ValueError:
            print(DANGER + "‚ùå Error: Ingresa valores num√©ricos v√°lidos." + RESET)

    cont = True
    while cont:

        try:

            quantity = int(input("Cantidad disponible: "))
            if quantity <= 0:
                print(DANGER + "‚ùå Error: La cantidad debe ser positiva." + RESET)
                continue
            cont = False

        except ValueError:
            print(DANGER + "‚ùå Error: Ingresa valores num√©ricos v√°lidos." + RESET)

    inventory[name] = {"price": price, "quantity": quantity}
    print(SUCCESS + "‚úÖ Producto a√±adido correctamente." + RESET)
        

def check_product(): # This one displays the data for a specific item if it exists. If the item that you typed don't exist, you can add it as a new item.

    print("Lista de productos üì¶:\n")
    for product in inventory:
        print(f"- {product.title()}")
    print("")

    name = input("Nombre del producto a consultar: ").strip().lower()
    product = inventory.get(name)
    
    if product:
        print(f"üì¶ Producto: {name.title()}")
        print(f"   Precio: ${product['price']:.2f}")
        print(f"   Cantidad: {product['quantity']}")
    else:
        print(DANGER + "‚ùå Producto no encontrado en el inventario." + RESET)

        cont = True
        while cont:

            add_missing_product = input("¬øDesea agregar el producto al inventario? (S/N)\n").lower()

            if add_missing_product == "s":
                add_product()
                cont = False
            elif add_missing_product == "n":
                print("El producto no ha sido agregado")
                cont = False
            else:
                print(DANGER + "‚ùå Error: Opci√≥n no v√°lida, intente de nuevo" + RESET)

def update_price(): # This one is used to update the price of one item if it exists. If the item that you typed don't exist, you can add it as a new item.

    print("Lista de productos üì¶:\n")
    for product in inventory:
        print(f"- {product.title()}")
    print("")

    name = input("Nombre del producto a actualizar: ").strip().lower()
    if name in inventory:
        try:
            new_price = float(input("Nuevo precio: "))
            inventory[name]['price'] = new_price
            print(SUCCESS + "‚úÖ Precio actualizado correctamente." + RESET)
        except ValueError:
            print(DANGER + "‚ùå Error: El precio debe ser un n√∫mero v√°lido." + RESET)
    else:
        print(DANGER + "‚ùå Producto no encontrado en el inventario." + RESET)

        cont = True
        while cont:

            add_missing_product = input("¬øDesea agregar el producto al inventario? (S/N)\n").lower()

            if add_missing_product == "s":
                add_product()
                cont = False
            elif add_missing_product == "n":
                print("El producto no ha sido agregado")
                cont = False
            else:
                print(DANGER + "‚ùå Error: Opci√≥n no v√°lida, intente de nuevo" + RESET)

def delete_product(): # This one is used to delete one item.
    
    print("Lista de productos üì¶:\n")
    for product in inventory:
        print(f"- {product.title()}")
    print("")

    name = input("Nombre del producto a eliminar: ").strip().lower()
    if name in inventory:
        del inventory[name]
        print(WARNING + "üóëÔ∏è Producto eliminado correctamente." + RESET)
    else:
        print(DANGER + "‚ùå Producto no encontrado en el inventario." + RESET)

def calculate_total_value(): # And this one calculates the items total value.

    print("Lista de productos üì¶:\n")
    for product in inventory:
        print(f"- {product.title()}")
    print("")

    total = sum(map(lambda x: x['price'] * x['quantity'], inventory.values()))
    print(WARNING + f"üí∞ Valor total del inventario: ${total:.2f}" + RESET)

def menu(): # This fuction contains a dictionary used for the menu.
    
    first = True

    if first == True:
        print("Introduce al menos un producto para acceder a las todas funcionalidades\n")
        add_product()
        first = False

    options = {
        "1": add_product,
        "2": check_product,
        "3": update_price,
        "4": delete_product,
        "5": calculate_total_value,
        "6": finish
    }
    while True:
        print(" ================================== // ================================== ")
        print("\nüìã Men√∫ de Inventario:\n")
        print("1. A√±adir producto.")
        print("2. Consultar producto.")
        print("3. Actualizar precio.")
        print("4. Eliminar producto.")
        print("5. Calcular valor total del inventario.")
        print("6. Salir.")
        choice = input("\nSeleccione una opci√≥n (1-6): ").strip()
        action = options.get(choice)
        if action:
            action()
        else:
            print(DANGER + "‚ùå Opci√≥n no v√°lida." + RESET)

def finish():
    print("üëã Saliendo del programa... ¬°Hasta luego!")
    exit()

if __name__ == "__main__":
    menu()